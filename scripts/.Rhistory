patientid <- as.factor(unique(plot_data$PatientID))
plot_data$Timepoint <- factor(plot_data$Timepoint)
plot_data$louvain_clusters <- as.factor(plot_data$louvain_clusters)
plot_data$PatientID <- factpr(plot_data$PatientID)
plot_data$PatientID <- factor(plot_data$PatientID)
MSggplot <- list()
for(i in patientid){
MSggplot[[i]] <- ggplot(plot_data[plot_data$PatientID == i, ], mapping=aes(fill=louvain_clusters, x=Timepoint)) +
geom_bar(data=plot_data, position="fill", stat="count")
}
MSggplot[["103"]]
MSggplot[["116"]]
i
patientid <- (unique(plot_data$PatientID))
for(i in patientid){
MSggplot[[i]] <- ggplot(plot_data[plot_data$PatientID == i, ], mapping=aes(fill=louvain_clusters, x=Timepoint)) +
geom_bar(data=plot_data, position="fill", stat="count")
}
MSggplot <- list()
for(i in patientid){
MSggplot[[i]] <- ggplot(plot_data[plot_data$PatientID == i, ], mapping=aes(fill=louvain_clusters, x=Timepoint)) +
geom_bar(data=plot_data, position="fill", stat="count")
}
MSggplot[["106"]]
MSggplot[["104"]]
MSggplot[["112"]]
# individual plots - MS and their timepoints together
plot_data <- read.csv("nocd19_recluster_all_res0.2.csv")
plot_data <- plot_data[plot_data$SampleType == "MS", ]
patientid <- (unique(plot_data$PatientID))
plot_data$Timepoint <- factor(plot_data$Timepoint)
plot_data$louvain_clusters <- as.factor(plot_data$louvain_clusters)
# plot_data$PatientID <- factor(plot_data$PatientID)
MSggplot <- list()
for(i in patientid){
MSggplot[[i]] <- ggplot(plot_data[plot_data$PatientID == i, ], mapping=aes(fill=louvain_clusters, x=Timepoint)) +
geom_bar(data=plot_data, position="fill", stat="count")
}
View(MSggplot)
MSggplot[[101]]
MSggplot[[111]]
ggplot(plot_data[plot_data$PatientID == 101, ], mapping=aes(fill=louvain_clusters, x=Timepoint)) +
geom_bar(data=plot_data, position="fill", stat="count")
ggplot(plot_data[plot_data$PatientID == 101, ], mapping=aes(fill=louvain_clusters, x=Timepoint)) +
geom_bar(data=plot_data, position="fill", stat="count")
ggplot(plot_data[plot_data$PatientID == 113, ], mapping=aes(fill=louvain_clusters, x=Timepoint)) +
geom_bar(data=plot_data, position="fill", stat="count")
ggplot(plot_data[plot_data$PatientID == "116", ], mapping=aes(fill=louvain_clusters, x=Timepoint)) +
geom_bar(data=plot_data, position="fill", stat="count")
ggplot(plot_data[plot_data$PatientID == "101", ], mapping=aes(fill=louvain_clusters, x=Timepoint)) +
geom_bar(data=plot_data, position="fill", stat="count")
ggplot((plot_data[plot_data$PatientID == "101", ]), mapping=aes(fill=louvain_clusters, x=Timepoint)) +
geom_bar(data=plot_data, position="fill", stat="count")
ggplot((plot_data[plot_data$PatientID == "116", ]), mapping=aes(fill=louvain_clusters, x=Timepoint)) +
geom_bar(data=plot_data, position="fill", stat="count")
a <- plot_data[plot_data$PatientID == 101, ]
ggplot(data = a, mapping=aes(fill=louvain_clusters, x=Timepoint)) +
geom_bar(data=plot_data, position="fill", stat="count")
a <- plot_data[plot_data$PatientID == 116, ]
ggplot(data = a, mapping=aes(fill=louvain_clusters, x=Timepoint)) +
geom_bar(data=plot_data, position="fill", stat="count")
a <- plot_data[plot_data$PatientID == 116, ]
ggplot(data = a, mapping=aes(fill=louvain_clusters, x=Timepoint)) +
geom_bar(data=a, position="fill", stat="count")
a <- plot_data[plot_data$PatientID == 101, ]
ggplot(data = a, mapping=aes(fill=louvain_clusters, x=Timepoint)) +
geom_bar(data=a, position="fill", stat="count")
patientid <- factor(unique(plot_data$PatientID))
# plot_data$PatientID <- factor(plot_data$PatientID)
MSggplot <- list()
for(i in patientid){
MSggplot[[i]] <- ggplot(plot_data[plot_data$PatientID == i, ], mapping=aes(fill=louvain_clusters, x=Timepoint)) +
geom_bar(data=plot_data[plot_data$PatientID == i, ], position="fill", stat="count")
}
MSggplot[[101]]
MSggplot[["101"]]
MSggplot[["111"]]
for (i in 1:length(MSggplot)) {
ggsave(MSggplot[[i]], filename = paste0("../output/New SVG for paper 06182023/ ", i, ".svg"))
}
#library(Rtsne)
library(tidyverse)
#library(tidyr)
library(uwot)
#library(Seurat)
library(cccd)
library(cluster)
#library(leiden)
#library(igraph)
#library(plotly)
library(pheatmap)
library(ggpubr)
#library(ggbreak)
data <- read.csv("BCG_fixed.csv")
signal_columns <- c("CD86", "CD30", "CD38", "IgD", "CD27", "IgM")
signal_columns2 <- c("CD19", "CD86", "CD30", "CD38", "IgD", "CD27", "IgM")
time <- c("HC0", "MS0", "MS1", "MS3", "MS6", "MS12", "TD0")
plot_data <- read.csv("nocd19_recluster_all_res0.2.csv")
plot_data <- read.csv("nocd19_recluster_all_res0.2.csv")
plot_data <- read.csv("nocd19_recluster_all_res0.2.csv")
MSggplot <- list()
plot_data$louvain_clusters <- as.factor(plot_data$louvain_clusters)
plot_data <- plot_data[plot_data$TTID == "HC0" | plot_data$TTID == "TD0", ]
#listing as factor required to print by value not index number
plot_data$PatientID <- as.factor(plot_data$PatientID)
patientid <- unique(plot_data$PatientID)
MSggplot <- list()
for(i in patientid){
MSggplot[[i]] <- ggplot(plot_data, mapping=aes(fill=louvain_clusters, x=i)) +
geom_bar(data=plot_data, position="fill", stat="count")
}
View(MSggplot)
names(MSggplot)
for (i in names(MSggplot)) {
ggsave(MSggplot[[i]], filename = paste0("../output/New SVG for paper 06182023/ ", i, ".svg"))
}
# individual plots - MS and their timepoints together
plot_data <- read.csv("nocd19_recluster_all_res0.2.csv")
plot_data <- plot_data[plot_data$SampleType == "MS", ]
patientid <- factor(unique(plot_data$PatientID))
plot_data$Timepoint <- factor(plot_data$Timepoint)
plot_data$louvain_clusters <- as.factor(plot_data$louvain_clusters)
MSggplot <- list()
for(i in patientid){
MSggplot[[i]] <- ggplot(plot_data[plot_data$PatientID == i, ], mapping=aes(fill=louvain_clusters, x=Timepoint)) +
geom_bar(data=plot_data[plot_data$PatientID == i, ], position="fill", stat="count")
}
for (i in names(MSggplot)) {
ggsave(MSggplot[[i]], filename = paste0("../output/New SVG for paper 06182023/ ", i, ".svg"))
}
#library(Rtsne)
library(tidyverse)
#library(tidyr)
library(uwot)
#library(Seurat)
library(cccd)
library(cluster)
#library(leiden)
#library(igraph)
#library(plotly)
library(pheatmap)
library(ggpubr)
#library(ggbreak)
data <- read.csv("BCG_fixed.csv")
signal_columns <- c("CD86", "CD30", "CD38", "IgD", "CD27", "IgM")
signal_columns2 <- c("CD19", "CD86", "CD30", "CD38", "IgD", "CD27", "IgM")
time <- c("HC0", "MS0", "MS1", "MS3", "MS6", "MS12", "TD0")
plot_data <- read.csv("nocd19_recluster_all_res0.2.csv")
# Individual plots - TD amd HC first
plot_data$louvain_clusters <- as.factor(plot_data$louvain_clusters)
plot_data <- plot_data[plot_data$TTID == "HC0" | plot_data$TTID == "TD0", ]
plot_data$louvain_clusters <- as.factor(plot_data$louvain_clusters)
plot_data <- plot_data[plot_data$TTID == "HC0" | plot_data$TTID == "TD0", ]
#listing as factor required to print by value not index number
plot_data$PatientID <- as.factor(plot_data$PatientID)
patientid <- unique(plot_data$PatientID)
MSggplot <- list()
for(i in patientid){
MSggplot[[i]] <- ggplot(plot_data, mapping=aes(fill=louvain_clusters, x=i)) +
geom_bar(data=plot_data, position="fill", stat="count")
}
MSggplot[[1]]
MSggplot[[2]]
MSggplot[[3]]
MSggplot[[4]]
MSggplot <- list()
patientid
MSggplot <- list()
for(i in patientid){
MSggplot[[i]] <- ggplot(plot_data[plot_data$PatientID == i, ], mapping=aes(fill=louvain_clusters, x=i)) +
geom_bar(data=plot_data[plot_data$PatientID == i, ], position="fill", stat="count")
}
MSggplot[[1]]
MSggplot[[2]]
MSggplot[[3]]
MSggplot[[5]]
View(MSggplot)
for (i in names(MSggplot)) {
ggsave(MSggplot[[i]], filename = paste0("../output/New SVG for paper 06182023/ ", i, ".svg"))
}
# individual plots - MS and their timepoints together
plot_data <- read.csv("nocd19_recluster_all_res0.2.csv")
plot_data$louvain_clusters <- as.factor(plot_data$louvain_clusters)
plot_data <- plot_data[plot_data$SampleType == "MS", ]
patientid <- factor(unique(plot_data$PatientID))
plot_data$Timepoint <- factor(plot_data$Timepoint)
plot_data$louvain_clusters <- as.factor(plot_data$louvain_clusters)
MSggplot <- list()
for(i in patientid){
MSggplot[[i]] <- ggplot(plot_data[plot_data$PatientID == i, ], mapping=aes(fill=louvain_clusters, x=Timepoint)) +
geom_bar(data=plot_data[plot_data$PatientID == i, ], position="fill", stat="count")
}
MSggplot[[1]]
MSggplot[[2]]
citation(tidyverse)
citation("tidyverse")
citation("uwot")
citation("cccd")
citation("cluster")
citation("pheatmap")
citation("ggpubr")
citation("ggrepel")
citation("plotly")
citation("svglite")
citation("R")
citation("rbase")
citation()
RStudio.Version()
data <- read.csv("../raw_data/BCG_scale_values2.csv")
#library(Rtsne)
library(tidyverse)
#library(tidyr)
library(uwot)
#library(Seurat)
library(cccd)
library(cluster)
#library(leiden)
#library(igraph)
#library(plotly)
library(pheatmap)
library(ggpubr)
#library(ggbreak)
View(data)
marker_cols <- 2:8 # set the range of columns that are markers within the csv file
asinh_scale <- 150 # set the cofactor by which it will be normalized, typically 150 for flow cytometry data
data_transformed <- data
# perform the transformation - first selecting the marker columns, dividing by cofactor is evaluated, then arcsinh is taken of those values - this inserts directly into the first column, replacing the original values
data_transformed[, marker_cols] <- asinh(data_transformed[, marker_cols] / asinh_scale)
summary(data)
summary(data_transformed)
data <- read.csv("../raw_data/BCG_scale_values3.csv")
asinh_scale <- 150 # set the cofactor by which it will be normalized, typically 150 for flow cytometry data
data_transformed <- data
# perform the transformation - first selecting the marker columns, dividing by cofactor is evaluated, then arcsinh is taken of those values - this inserts directly into the first column, replacing the original values
data_transformed[, marker_cols] <- asinh(data_transformed[, marker_cols] / asinh_scale)
summary(data)
summary(data)
summary(data_transformed)
test <- read.csv("/BCG_fixed.csv")
test <- read.csv("BCG_fixed.csv")
View(test)
data <- read.csv("../raw_data/BCG_scale_values2.csv")
marker_cols <- 2:8 # set the range of columns that are markers within the csv file
asinh_scale <- 150 # set the cofactor by which it will be normalized, typically 150 for flow cytometry data
data_transformed <- data
# perform the transformation - first selecting the marker columns, dividing by cofactor is evaluated, then arcsinh is taken of those values - this inserts directly into the first column, replacing the original values
data_transformed[, marker_cols] <- asinh(data_transformed[, marker_cols] / asinh_scale)
View(data_transformed)
data <- read.csv("../raw_data/BCG_scale_values3.csv")
marker_cols <- 2:8 # set the range of columns that are markers within the csv file
asinh_scale <- 150 # set the cofactor by which it will be normalized, typically 150 for flow cytometry data
data_transformed <- data
# perform the transformation - first selecting the marker columns, dividing by cofactor is evaluated, then arcsinh is taken of those values - this inserts directly into the first column, replacing the original values
data_transformed[, marker_cols] <- asinh(data_transformed[, marker_cols] / asinh_scale)
#data <- read.csv("../raw_data/BCG_scale_values2.csv")
data <- read.csv("../raw_data/BCG_scale_values3.csv")
marker_cols <- 2:8 # set the range of columns that are markers within the csv file
asinh_scale <- 150 # set the cofactor by which it will be normalized, typically 150 for flow cytometry data
data_transformed <- data
# perform the transformation - first selecting the marker columns, dividing by cofactor is evaluated, then arcsinh is taken of those values - this inserts directly into the first column, replacing the original values
data_transformed[, marker_cols] <- asinh(data_transformed[, marker_cols] / asinh_scale)
mycolors = c("navyblue", "springgreen2", "yellow", "red3")
#mycolors = c(rev(rainbow(4)))
ggplot(data = (filter(data, SampleType == "MS")), aes(x = IgD, y = CD27)) +
geom_hex() + scale_fill_gradientn(colors = mycolors)
#mycolors = c(rev(rainbow(4)))
ggplot(data = (filter(test, SampleType == "MS")), aes(x = IgD, y = CD27)) +
geom_hex() + scale_fill_gradientn(colors = mycolors)
raw_data <- read.csv("../raw_data/BCG_scale_values3.csv")
marker_cols <- 2:8 # set the range of columns that are markers within the csv file
asinh_scale <- 150 # set the cofactor by which it will be normalized, typically 150 for flow cytometry data
# perform the transformation - first selecting the marker columns, dividing by cofactor is evaluated, then arcsinh is taken of those values - this inserts directly into the first column, replacing the original values
data_transformed <- raw_data[, marker_cols] <- asinh(raw_data[, marker_cols] / asinh_scale)
summary(raw_data) %>%
summary(data_transformed)
summary(raw_data)
summary(data_transformed)
#Import csv from Flowjo compensated scale values (gated all cells on CD19+ first)
raw_data <- read.csv("../data/BCG_scale_values3.csv")
getwd()
setwd("~/Dropbox/DropsyncFiles/R/cody_flow_analysis/hu_ocr_flow_analysis/scripts")
#Import csv from Flowjo compensated scale values (gated all cells on CD19+ first)
raw_data <- read.csv("../data/BCG_scale_values3.csv")
#library(Rtsne)
library(tidyverse)
#library(tidyr)
library(uwot)
#library(Seurat)
library(cccd)
library(cluster)
#library(leiden)
#library(igraph)
#library(plotly)
library(pheatmap)
library(ggpubr)
#library(ggbreak)
#read in the compensated and transformed data
data <- read.csv("../data/nocd19_recluster_all_res0.2.csv")
getwd()
#Create an empty list to iterate, save, or export plot objects
MSggplot <- list()
# Calculate the mean of the numeric variables (signal columns) for each level of the categorical variables (The clusters). The by() function is used to group the data by the cluster variable and then the colMeans() function is used to calculate the mean of the numeric variables (signal columns) for each group. Outputs a nested list - each separated by cluster displaying the mean of each signal column.
hm_data <- by(plot_data, plot_data$louvain_clusters, function(tab) colMeans(tab[,signal_columns2]))
plot_data <- data
# Calculate the mean of the numeric variables (signal columns) for each level of the categorical variables (The clusters). The by() function is used to group the data by the cluster variable and then the colMeans() function is used to calculate the mean of the numeric variables (signal columns) for each group. Outputs a nested list - each separated by cluster displaying the mean of each signal column.
hm_data <- by(plot_data, plot_data$louvain_clusters, function(tab) colMeans(tab[,signal_columns2]))
# Create vector for signal columns
signal_columns2 <- c("CD19", "CD86", "CD30", "CD38", "IgD", "CD27", "IgM")
# Calculate the mean of the numeric variables (signal columns) for each level of the categorical variables (The clusters). The by() function is used to group the data by the cluster variable and then the colMeans() function is used to calculate the mean of the numeric variables (signal columns) for each group. Outputs a nested list - each separated by cluster displaying the mean of each signal column.
hm_data <- by(plot_data, plot_data$louvain_clusters, function(tab) colMeans(tab[,signal_columns2]))
#t transposes the list (hm_data) so that columns become rows and vice versa, after rowbinding the data from the entire list - outputs a matrix with rownames as signal columns and colnames as clusters - do.call required to keep list-like format, otherwise binds all as long single row list
hm_data <- t(do.call(rbind, hm_data))
# re-order rows
hm_data <- hm_data[c("CD19", "IgD", "IgM", "CD27", "CD38", "CD86", "CD30"),]
#Generate the plot
MSggplot[[1]] <- pheatmap(hm_data, scale = "row", cluster_cols = F, cluster_rows = F, main = "All louvain clusters")
#read in the compensated, transformed data with clusters
plot_data <- read.csv("../data/nocd19_recluster_all_res0.2.csv")
MSggplot <- list()
plot_data$louvain_clusters <- as.factor(plot_data$louvain_clusters)
# Remove 116 to exclude misleading sample from total aggregate - do not run this line for individual plots below
plot_data <- plot_data[plot_data$PatientID != 116, ]
plot_data$TTID <- factor(plot_data$TTID, levels = c("HC0", "MS0", "MS1", "MS3", "MS6", "MS12", "TD0"))
#Plot louvain clusters percent of the whole stacked for each timepoint - adds up to 100 percent
MSggplot[[1]] <- ggplot(plot_data, mapping=aes(fill=louvain_clusters, x=TTID)) +
geom_bar(data=plot_data, position="fill", stat="count")
MSggplot[[1]]
# Individual plots - TD and HC first
plot_data <- read.csv("nocd19_recluster_all_res0.2.csv")
# Individual plots - TD and HC first
plot_data <- read.csv("../data/nocd19_recluster_all_res0.2.csv")
plot_data$louvain_clusters <- as.factor(plot_data$louvain_clusters)
plot_data <- plot_data[plot_data$TTID == "HC0" | plot_data$TTID == "TD0", ]
#listing as factor required to print by value not index number
plot_data$PatientID <- as.factor(plot_data$PatientID)
patientid <- unique(plot_data$PatientID)
MSggplot <- list()
for(i in patientid){
MSggplot[[i]] <- ggplot(plot_data[plot_data$PatientID == i, ], mapping=aes(fill=louvain_clusters, x=i)) +
geom_bar(data=plot_data[plot_data$PatientID == i, ], position="fill", stat="count")
}
MSggplot[[1]]
MSggplot[[2]]
MSggplot[[3]]
MSggplot[[1]]
MSggplot[[15]]
MSggplot[[14]]
View(MSggplot)
MSggplot[["118"]]
# individual plots - MS and their timepoints together
plot_data <- read.csv("nocd19_recluster_all_res0.2.csv")
# individual plots - MS and their timepoints together
plot_data <- read.csv("../data/nocd19_recluster_all_res0.2.csv")
plot_data$louvain_clusters <- as.factor(plot_data$louvain_clusters)
plot_data <- plot_data[plot_data$SampleType == "MS", ]
patientid <- factor(unique(plot_data$PatientID))
plot_data$Timepoint <- factor(plot_data$Timepoint)
plot_data$louvain_clusters <- as.factor(plot_data$louvain_clusters)
MSggplot <- list()
for(i in patientid){
MSggplot[[i]] <- ggplot(plot_data[plot_data$PatientID == i, ], mapping=aes(fill=louvain_clusters, x=Timepoint)) +
geom_bar(data=plot_data[plot_data$PatientID == i, ], position="fill", stat="count")
}
MSggplot[[1]]
MSggplot[[12]]
MSggplot[[10]]
# All samples
plot_data <- read.csv("../data/nocd19_recluster_all_res0.2.csv")
#Turns louvain clusters within the plot_data df from numeric into factors so that the clusters can be graphed discretely
plot_data$louvain_clusters <- as.factor(plot_data$louvain_clusters)
#Remove 116 because of misleading 6 month timepoint
plot_data <- plot_data[plot_data$PatientID != 116, ]
# Create a list of all the ggplot objects and put the umap with kmeans clusters plot for all timepoints into it
MSggplot <- list()
MSggplot[[1]] <- ggplot(plot_data) +
geom_point(aes(x=x, y=y, color=louvain_clusters), alpha = 1) +
ggtitle("All louvain_clusters")
MSggplot[[1]]
# loop that places all individual IDS onto the umap as above
MSggplot <- list()
time <- c("HC0", "MS0", "MS1", "MS3", "MS6", "MS12", "TD0")
# graph dimensions necessary because we want to keep the same axes when events are lost
minx <- min(plot_data$x)
maxx <- max(plot_data$x)
miny <- min(plot_data$y)
maxy <- max(plot_data$y)
for (i in time){
MSggplot[[i]] <- ggplot(data = (plot_data[plot_data$TTID == i,])) +
geom_point(aes(x=x, y=y, color=louvain_clusters), alpha = 1) +
ggtitle(paste(i, " - Louvain_clusters")) +
scale_x_continuous(limits = c(minx, maxx)) +
scale_y_continuous(limits = c(miny, maxy))
}
MSggplot[[1]]
MSggplot[[3]]
View(MSggplot)
MSggplot <- list()
# Loop for each column within each group if desired
for(i in time){
MSggplot[[i]] <- ggplot(data = plot_data[plot_data$TTID == i, ]) +
geom_density(mapping = aes(x = CD86)) +
facet_wrap(~ louvain_clusters, nrow = 1) #+
#scale_x_continuous(limits = c(minvalue, maxvalue))
}
MSggplot[[1]]
MSggplot[[2]]
MSggplot[[1]]
MSggplot[[2]]
#plot histograms
MSggplot <- list()
maxvalue <- 6
minvalue <- -5
MSggplot[[1]] <- ggplot(data = plot_data) +
geom_density(mapping = aes(x = CD86)) +
facet_wrap(~ louvain_clusters, nrow = 1) +
scale_x_continuous(limits = c(minvalue, maxvalue))
MSggplot[[1]]
# Get min and max values from signal columns to set x axis for graphs
maxvalue <- max(plot_data[,4:10])
summary(plot_data[,4:10])
MSggplot[[1]]
# get all mean values for each cluster and signal column combination
gmfi_list <- list()
clusters <- unique(plot_data$louvain_clusters)
signals <- colnames(plot_data[4:10])
for(i in clusters){
temp <- plot_data[plot_data$louvain_clusters == i, ]
for(j in colnames(plot_data[4:10])){
gmfi_list[[paste(i,j)]] <- mean(temp[,j])
}}
View(temp)
View(data)
View(gmfi_list)
# Takes list above, converts into matrix, creates a column from the unique rownames, splits the string into the cluster and marker columns
temp <- as.matrix(gmfi_list)
# Takes list above, converts into matrix, creates a column from the unique rownames, splits the string into the cluster and marker columns
temp <- as.matrix(gmfi_list)
temp2 <- cbind(rownames(temp))
temp <- cbind(temp2, temp)
temp <- as.data.frame(temp)
temp <- separate_wider_delim(temp, "V1", delim = " ", names = c("cluster", "marker"))
colnames(temp)[3] <- c("mean")
temp$mean <- as.numeric(temp$mean)
View(temp)
#Add number of samples per group to df bound to the TTID
TTIDsamplepergroup <- read.csv("TTID_samplespergroupdf.csv")
#Add number of samples per group to df bound to the TTID
TTIDsamplepergroup <- read.csv("../data/TTID_samplespergroupdf.csv")
plot_data <- read.csv("../data/nocd19_recluster_all_res0.2.csv")
plot_data <- plot_data %>%
left_join(TTIDsamplepergroup, by = "TTID")
total_cells <- plot_data %>%
group_by(TTID) %>%
add_count(louvain_clusters) %>%
mutate(cell_norm_to_patients = n/samples_per_group) %>%
mutate(cell_norm_to_patients_no_116 = n/samples_per_group_no116) %>%
ungroup()
total_cells$TTID <- factor(total_cells$TTID, levels = c("HC0", "MS0", "MS1", "MS3", "MS6", "MS12", "TD0"))
total_cells$louvain_clusters <- factor(total_cells$louvain_clusters)
MSggplot <- list()
#Stacked bar chart - total cells per louvain cluster
ggplot(data = total_cells) +
geom_bar(mapping = aes(x = TTID, fill = louvain_clusters)) +
labs(title = "Total cells in louvain_clusters")
testlist <- list()
time <- c("HC0", "MS0", "MS1", "MS3", "MS6", "MS12", "TD0")
for(i in time){
a <- unique(total_cells$cell_norm_to_patients_no_116[total_cells$TTID == i])
b <- unique(total_cells$louvain_clusters[total_cells$TTID == i ])
d <- data.frame(cbind(a, b, i))
colnames(d) <- c("cellspclusterppatient", "louvain_clusters", "TTID")
testlist[[i]] <- d
}
# This df no contains the unique numbers of cells per cluster per patient with 116 removed
testlist <- do.call(rbind, testlist)
testlist$TTID <- factor(testlist$TTID, levels = c("HC0", "MS0", "MS1", "MS3", "MS6", "MS12", "TD0"))
testlist$cellspclusterppatient <- as.integer(testlist$cellspclusterppatient)
ggplot(data = testlist, mapping = aes(x = TTID, y = cellspclusterppatient, fill = louvain_clusters)) +
geom_col() +
labs(title = "Total cells in louvain_clusters")
View(testlist)
testlist <- list()
time <- c("HC0", "MS0", "MS1", "MS3", "MS6", "MS12", "TD0")
for(i in time){
a <- unique(total_cells$cell_norm_to_patients_no_116[total_cells$TTID == i])
b <- unique(total_cells$louvain_clusters[total_cells$TTID == i ])
d <- data.frame(cbind(a, b, i))
colnames(d) <- c("cellspclusterppatient", "louvain_clusters", "TTID")
testlist[[i]] <- d
}
View(d)
View(testlist)
testlist[["HC0"]]
SessionInfo()
sessionInfo()
writeLines(capture.output(sessionInfo()), "sessionInfo.txt")
writeLines(capture.output(sessionInfo()), "../data/sessionInfo.txt")
writeLines(capture.output(sessionInfo()), "../outpt/sessionInfo.txt")
writeLines(capture.output(sessionInfo()), "../output/sessionInfo.txt")
?writeLines
?capture.output
MSggplot <- list()
for(i in patientid){
MSggplot[[i]] <- ggplot(plot_data[plot_data$PatientID == i, ], mapping=aes(fill=louvain_clusters, x=Timepoint)) +
geom_bar(data=plot_data[plot_data$PatientID == i, ], position="fill", stat="count")
}
# Save plots in svg format
for (i in names(MSggplot)) {
ggsave(MSggplot[[i]], filename = paste0("../output/Supp Fig 2 MS only ", i, ".svg"))
}
writeLines(capture.output(sessionInfo()), "../info/sessionInfo.txt")
writeLines(capture.output(sessionInfo()), "../info/sessionInfo.txt")
